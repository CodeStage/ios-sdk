FigoError.swift
	public enum FigoError: ErrorType, ResponseObjectSerializable, CustomStringConvertible, CustomDebugStringConvertible
	public init(representation: AnyObject) throws
	case NoActiveSession
	case EmptyResponse
	case JSONMissingMandatoryKey(key: String, typeName: String)
	case JSONMissingMandatoryValue(key: String, typeName: String)
	case JSONUnexpectedValue(key: String, typeName: String)
	case JSONUnexpectedType(key: String, typeName: String)
	case JSONUnexpectedRootObject(typeName: String)
	case JSONSerializationError(error: NSError)
	case NetworkLayerError(error: NSError)
	case ServerError(message: String)
	case ServerErrorWithDescrition(error: String, description: String)
	case UnspecifiedError(reason: String?)
	case TaskProcessingError(accountID: String, message: String?)
	case TaskProcessingTimeout
	public var failureReason: String
	public var description: String
	public var debugDescription: String
FigoResult.swift
	public enum FigoResult<Value>: CustomStringConvertible, CustomDebugStringConvertible
	case Success(Value)
	case Failure(FigoError)
	public var description: String
	public var debugDescription: String
PaymentParameters.swift
	public enum PaymentType: String
	case Transfer = "Transfer"
	case DirectDebit = "Direct debit"
	case SEPATransfer = "SEPA transfer"
	case SEPADirectDebit = "SEPA direct debit"
	public struct PaymentParameters
	public let type: PaymentType
	public let allowed_recipients: [String]
	public let can_be_recurring: Bool
	public let can_be_scheduled: Bool
	public let max_purpose_length: Int
	public let supported_file_formats: [String]
	public let supported_text_keys: [Int]
LoginCredentials.swift
	public struct LoginCredentials
Address.swift
	public struct Address
	public let city: String?
	public let company: String?
	public let postal_code: String?
	public let street: String?
	public let street2: String?
	public let country: String?
	public let vat: AnyObject?
	public let bill: AnyObject?
SupportedService.swift
	public struct SupportedService
	public let additional_icons: AnyObject
SupportedBank.swift
	public struct SupportedBank
	public let bank_name: String
	public let bank_code: Int
	public let bic: String
	public let icon: AnyObject
	public let credentials: [LoginCredentials]
	public let advice: String
Challenge.swift
	public struct Challenge
TanScheme.swift
	public struct TanScheme
	public let medium_name: String
	public let name: String
	public let tan_scheme_id: String
Account.swift
	let auto_sync: Bool
	public let supported_tan_schemes: [TanScheme]
	public let in_total_balance: Bool
	public init(representation: AnyObject) throws
	public static func collection(representation: AnyObject) throws -> [Account]
	public var JSONObject: [String: AnyObject]
LoginSettings.swift
	public struct LoginSettings
User.swift
	public struct User
	public struct CreateUserParameters: JSONObjectConvertible
SyncStatus.swift
	public struct SyncStatus
	public let code: Int
	public let message: String?
	public let success_timestamp: String
	public let sync_timestamp: String
Balance.swift
	public struct Balance
	public struct Balance
	public init(representation: AnyObject) throws
	public struct Balance
	public init?(optionalRepresentation: AnyObject?) throws
